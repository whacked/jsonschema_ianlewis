* INTRO

jsonschema is a full featured validator for the JSON Schema specification.
It conforms to the JSON Schema Proposal Second Draft which can be found at the
following url:

http://groups.google.com/group/json-schema/web/json-schema-proposal---second-draft

** LIMITATIONS

The unique property is currently not validated.

** this fork
   
   A temporary solution. Everything is "works for me".

*** rudimentary =$ref= support
    
    not thoroughly tested. current code "works" in conjunction with lookup via the =typedef= attribute, otherwise untested.

    Examples:

    1. [DEPRECATED] $(path) lookup syntax

#+BEGIN_EXAMPLE
  {
    "config": { "$ref": "$(file:///path/to/schema.json)/properties/config" },
  }
#+END_EXAMPLE
    
    2. absolute =file://= lookup

#+BEGIN_EXAMPLE
  {
    "config": { "$ref": "file:///path/to/schema.json#/properties/config" },
  }
#+END_EXAMPLE

    3. relative =file://= lookup

#+BEGIN_EXAMPLE
  {
    "config": { "$ref": "schema.json#/properties/config" },
  }
#+END_EXAMPLE

    the validator doesn't know where to look; you set the lookup path when you call =validate=.

*** [DEPRECATED] =typedef= attribute

    this library used to throw an exception when encountering an
    unsupported attribute. But as of draft [[http://tools.ietf.org/html/draft-zyp-json-schema-03][version 3]] we expect that
    unknown keywords in the schema are ignored but still reachable via
    the json lookup path, rendering a separate =typedef= attribute
    redundant. see
    https://github.com/json-schema/json-schema/issues/18 for method of
    achieving the same thing.

    This library probably will not function as expected unless you use
    the =typedef= keyword, but it certainly is not spec-conforming!

    Sample type lookup:

#+BEGIN_EXAMPLE
  {
    "description": "example schema with typedef",
    "type": "object",
    "properties": {
      "typedef_object": {
        "$ref": "#typedef/referenced_typedef"
      }
    },
  
    "typedef": {
      "referenced_typedef": {
        "type": "object",
        "properties": {
          "foo" : { "type": "integer" },
          "bar" : { "type": "number" }
        }
      }
    }
  }
#+END_EXAMPLE

    Then =typedef_object= ends up with the schema specified by
    =schema["typedef"]["referenced_typedef"]=

* INSTALL

jsonschema uses setup tools so it can be installed normally using:

=python setup.py install=

Furthermore, the test suite can be run by using the following command:

=python setup.py test=

* USAGE

JSON documents and schema must first be loaded into a python dictionary type
before it can be validated. This can be done with the JSON parser of your choice
but I will use simplejson (just because).

** Parsing a simple JSON document

#+BEGIN_EXAMPLE
>>> import jsonschema
>>> jsonschema.validate("simplejson", {"type":"string"})
#+END_EXAMPLE

** Parsing a more complex JSON document.

#+BEGIN_EXAMPLE
>>> import simplejson
>>> import jsonschema
>>> 
>>> data = simplejson.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
>>> schema = {
...   "type":"array", 
...   "items":[
...     {"type":"string"},
...     {"type":"object",
...      "properties":{
...        "bar":{
...          "items":[
...            {"type":"string"},
...            {"type":"any"},
...            {"type":"number"},
...            {"type":"integer"}
...          ]
...        }
...      }
...    }
...   ]
... }
>>> jsonschema.validate(data,schema)

#+END_EXAMPLE

** Handling validation errors

ValueErrors are thrown when validation errors occur.

#+BEGIN_EXAMPLE
>>> import jsonschema
>>> try:
...     jsonschema.validate("simplejson", {"type":"string","minLength":15})
... except ValueError, e:
...     print e.message
... 
Length of 'simplejson' must be more than 15.000000

#+END_EXAMPLE

* EXTENDING JSONSCHEMA

jsonschema provides an API similar to simplejson in that validators can be
overridden to support special property support or extended functionality. 
Samples of how jsonschema can be extended can be found in the examples
directory.

